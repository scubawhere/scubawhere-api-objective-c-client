#import <Foundation/Foundation.h>
#import "SWGInlineResponse2003.h"
#import "SWGErrorModel.h"
#import "SWGApi.h"

/**
* Scubawhere API Documentation
* This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
*
* OpenAPI spec version: 1.0.0
* Contact: bryan@scubawhere.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface SWGLocationApi: NSObject <SWGApi>

extern NSString* kSWGLocationApiErrorDomain;
extern NSInteger kSWGLocationApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Attach a location to a company
/// 
///
/// @param locationId 
/// 
///  code:200 message:"Success (Resource updated)",
///  code:404 message:"Not found (No location exists with the ID provided)"
///
/// @return SWGInlineResponse2003*
-(NSNumber*) attachLocationWithLocationId: (NSNumber*) locationId
    completionHandler: (void (^)(SWGInlineResponse2003* output, NSError* error)) handler;


/// Create a location
/// 
///
/// @param name 
/// @param _description  (optional)
/// @param latitude  (optional)
/// @param longitude  (optional)
/// @param tags  (optional)
/// 
///  code:200 message:"Success (Resources found)",
///  code:422 message:"Unprocessable Entity (One or more parameter was invalid)"
///
/// @return SWGInlineResponse2003*
-(NSNumber*) createLocationWithName: (NSString*) name
    _description: (NSString*) _description
    latitude: (NSNumber*) latitude
    longitude: (NSNumber*) longitude
    tags: (NSArray<NSNumber*>*) tags
    completionHandler: (void (^)(SWGInlineResponse2003* output, NSError* error)) handler;


/// Dettach a location to a company
/// 
///
/// @param locationId 
/// 
///  code:200 message:"Success (Resource updated)",
///  code:404 message:"Not found (No location exists with the ID provided)"
///
/// @return SWGInlineResponse2003*
-(NSNumber*) dettachLocationWithLocationId: (NSNumber*) locationId
    completionHandler: (void (^)(SWGInlineResponse2003* output, NSError* error)) handler;


/// Retrieve all locations associated with the company
/// 
///
/// 
///  code:200 message:"Success (Resources found)"
///
/// @return SWGInlineResponse2003*
-(NSNumber*) getAllLocationsWithCompletionHandler: 
    (void (^)(SWGInlineResponse2003* output, NSError* error)) handler;


/// Retrieve all tags associated to all locations
/// 
///
/// 
///  code:200 message:"Success (Resources found)"
///
/// @return SWGInlineResponse2003*
-(NSNumber*) getLocationTagsWithCompletionHandler: 
    (void (^)(SWGInlineResponse2003* output, NSError* error)) handler;


/// Update a location
/// 
///
/// @param locationId 
/// @param _description 
/// 
///  code:200 message:"Success (Resource updated)",
///  code:404 message:"Not found (No session exists with the ID provided)",
///  code:422 message:"Unprocessable Entity (One or more parameter was invalid)"
///
/// @return SWGInlineResponse2003*
-(NSNumber*) updateLocationWithLocationId: (NSNumber*) locationId
    _description: (NSNumber*) _description
    completionHandler: (void (^)(SWGInlineResponse2003* output, NSError* error)) handler;



@end
